<!DOCTYPE html>
<html>
<head>
	<title>Arduboy Tile Converter</title>
	<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
	<meta name="viewport" content="width=750" />
	<meta name="buildDate" content="Friday 3 March 2017" />
	<meta property="og:url" content="https://teamarg.github.io/arduboy-tile-converter/" />
	<meta property="og:type" content="website" /> 
	<link rel="stylesheet" type="text/css" href="css/textstyles.css" />
	<script type="text/javascript" src="js/imageCode.js">
	</script>
	<link rel="stylesheet" type="text/css" href="css/pagestyle.css?3.568126e+9" />
	<style type="text/css">
	div.container {min-height: 1070px;}.shape_18 {background: url('images/shape_18.png') no-repeat;}@media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-devicepixel-ratio: 1.5), only screen and (min-resolution: 1.5dppx) {.shape_18 {background: url('images/shape_18@2x.png') no-repeat;background-size: 702px 162px;}}
	canvas,
	img {
		image-rendering: crisp-edges;
		image-rendering: -moz-crisp-edges;
		image-rendering: -webkit-optimize-contrast;
		image-rendering: optimize-contrast;
		image-rendering: pixelated;
		-ms-interpolation-mode: nearest-neighbor;
	}
	textarea{
		resize:none;
		padding:0px;
		background-color: #FEFEFC;
		border: 1px solid #463C3C;
		white-space: pre;
	}
	</style>
	<script language="JavaScript">
	function setup(body){
		body.ondragover = function() {
			return false;
		};
		body.ondragend = function() {
			return false;
		};
		body.ondrop = function(e) {
		        // Prevent the browser from showing the dropped file
		        e.preventDefault();

		        // Get the image data
		        var imageData = getImageData(e);
		        
		        // If there is some data, add it to the page
		        if(imageData !== null) {
		        	addDroppedElement(imageData);
		        }
		    }
		}
		function getImageData(event) {
			var file = event.dataTransfer.files[0];
			if(file.type.indexOf('image') === 0){
				return file;
			}
		}
		function addDroppedElement(imageData) {
			var reader = new FileReader();
			reader.onload = function(event) {
				event.preventDefault;

		        // Create image element
		        var droppedImage = new Image();
		        droppedImage.src = event.target.result;
				// add delay so the image can be loaded properly before accessing it
				setTimeout(function(){
					var imgNW = droppedImage.naturalWidth;
					var imgNH = droppedImage.naturalHeight;
					var zoom = 1;
					switch(imgNW){
						case 8: zoom = 4;
						break;
						case 16: zoom = 2;
						break;
						case 24: zoom = 4/3;
						break;
						case 24: zoom = 1;
						break;
					}
					var tileW = imgNW*zoom;
					var tileH = tileW;

		        	// Create canvas for tiles
		        	var droppedImageCanvas = document.createElement("canvas");
		        	var canvasWidth = Math.floor(700/(tileW+2)) * (tileW+2) -2;
		        	var canvasHeight = Math.ceil(imgNH/imgNW/Math.floor(700/(tileW+2))) * (tileH+2) -2;
		        	droppedImageCanvas.width = canvasWidth;
		        	droppedImageCanvas.height = canvasHeight;

		        	// Create invisible canvas for original image
		        	var invisImageCanvas = document.createElement("canvas");
		        	invisImageCanvas.width = imgNW;
		        	invisImageCanvas.height = imgNH;
		        	invisImageCanvas.style.display = "none";

		        	// Create code container
		        	var droppedImageCode = document.createElement("textarea");
		        	droppedImageCode.className = "code";
		        	droppedImageCode.style.width = "698px";
		        	droppedImageCode.rows = "20";

		        	// Create div container
		        	var droppedImageDiv = document.createElement("div");
		        	droppedImageDiv.className = "image-view";
		        	droppedImageDiv.appendChild(droppedImageCanvas);
		        	droppedImageDiv.appendChild(invisImageCanvas);
		        	
		        	var imageContainer = document.getElementById("image-container");
		        	imageContainer.innerHTML = "";
		        	imageContainer.appendChild(droppedImageDiv);
		        	imageContainer.appendChild(document.createElement("br"));
		        	imageContainer.appendChild(droppedImageCode);

		        	// Create context for drawing
		        	var droppedImageContext = droppedImageCanvas.getContext("2d");
		        	droppedImageContext.imageSmoothingEnabled = false;
		        	var invisImageContext = invisImageCanvas.getContext("2d");

		        	// Draw the image on an invisible canvas to generate the code
		        	invisImageContext.drawImage(droppedImage, 0, 0);

		        	// Clip the image and draw individual tiles on the canvas with 2px spacing inbetween
		        	for(var i = 0, x = 0, y = 0, tile; i < imgNH/imgNW; i++){
		        		if(x+tileW+2 <= canvasWidth){
		        			x += tileW+2;
		        		}
		        		else{
		        			x = 0;
		        			y += tileH+2 
		        		}
		        		if(i === 0){x = 0;}
		        		droppedImageContext.drawImage(droppedImage, 0, i*imgNW, imgNW, imgNW, x, y, tileW, tileH);
		        	}

		        	// Draw raster between tiles on the canvas
		        	droppedImageContext.beginPath();
		        	for(var j = 1; j <= Math.floor(700/(tileW+2)); j++){
		        		droppedImageContext.moveTo(j*tileW+1+(j-1)*2, 0);
		        		droppedImageContext.lineTo(j*tileW+1+(j-1)*2, canvasHeight);
		        	}
		        	for(var k = 1; k <= Math.ceil(imgNH/imgNW/Math.floor(700/(tileW)+2)); k++){
		        		droppedImageContext.moveTo(0, k*tileW+1+(k-1)*2);
		        		droppedImageContext.lineTo(canvasWidth, k*tileW+1+(k-1)*2);
		        	}
		        	droppedImageContext.strokeStyle = '#00969C';
		        	droppedImageContext.lineWidth = 2;
		        	droppedImageContext.stroke();
		        	
		        	// Generate the sprite string
		        	var spriteString = "const unsigned char PROGMEM "+imageData.name.split('_')[0]+"[] =\n"+
		        	"{\n// width, height,\n"+imgNW+", "+imgNW+",\n"+
		        	"// TILE 00\n";
		        	
		        	var pageCount = Math.ceil(imgNH / 8);
		        	var columnCount = imgNW;
		        	var currentByte = 0;
		        	var rowCounter = 0;
		        	var tileCounter = 0;
		        	
		        	// Read the sprite page-by-page
		        	for(var page = 0; page < pageCount; page++) {

		        	    // Read the page column-by-column
		        	    for(var column = 0; column < columnCount; column++) {

		        	        // Read the column into a byte
		        	        var spriteByte = 0;
		        	        for(var yPixel = 0; yPixel < 8; yPixel++) {

		        	            // If the color of the pixel is not black, count it as white
		        	            var pixelColor = invisImageContext.getImageData(column, page*8 + yPixel, 1, 1).data;
		        	            if(pixelColor[0] > 0 || pixelColor[1] > 0 || pixelColor[2] > 0) {
		        	            	spriteByte |= (1 << yPixel);
		        	            }
		        	        }
		        	        
		        	        // Print the column in hex notation, add a comma for formatting
		        	        var digitStr = spriteByte.toString(16);
		        	        if(digitStr.length == 1) {
		        	        	digitStr = "0" + digitStr;
		        	        }
		        	        spriteString += "0x" + digitStr + ", ";
		        	        if(currentByte%imgNW == imgNW-1){
		        	        	spriteString += "\n";
		        	        	rowCounter++;
		        	        	if(rowCounter == imgNW/8 && tileCounter < imgNH/imgNW - 1){
		        	        		tileCounter++;
		        	        		var tileNumber = tileCounter.toString().length === 1 ? "0"+tileCounter.toString() : tileCounter.toString();
		        	        		spriteString += "// TILE "+tileNumber+"\n";
		        	        		rowCounter = 0;
		        	        	}
		        	        }
		        	        currentByte++;
		        	    }
		        	}
		        	// Terminate the array
		        	spriteString += "};";
		        	// Create an invisible element containing the string
		        	droppedImageCode.innerHTML = spriteString;
		        }, 50);
};
reader.readAsDataURL(imageData);
}
</script>
</head>

<body onload="setup(this);" style="font-family: Courier New; text-align: center;">
	<div class="shadow">
		<div class="container" style="height:1100px">


			<div class="content" data-minheight="1100">
				<div style="position:relative">
					<div class="shape_14" style="left:25px;top:20px;width:700px;height:64px;z-index:14;position:absolute;">
						<img src="images/TileSheetConverter.png" height="64" width="700" />
					</div>
					<div class="shape_14" style="left:25px;top:90px;width:700px;height:64px;z-index:14;position:absolute;">
					<p class="Style2">

The Tilesheet Converter converts a file to an array of one one or more square tiles. Tiles are assumed to be solid, with no transparency, so no masks are produced.
<br/><br/>
The filename can be any name but must have the dimensions of a single sprite or tile, in the form _WIDTHxHEIGHT, appended to it before the extension.
E.g. to create an array named mySprites with each sprite having a width of 8 and a height of 16 pixels, from a PNG image, the file should be named mySprites_8x16.png. The underscore and dimensions will be removed from the resulting array names.
<br/><br/>
The image file for multiple sprites or tiles must have them arranged vertically in a single column.
<br/><br/>
Here is an image that will produce arrays for 3 16x16 tiles or sprites (or a single 16x48 image array with the Image Converter). There are no transparent pixels. Its original filename was tiles_16x16.png
<br/><br/>

<img src="images/Example2.png" width="16px" height="48px"><br/><br/>
In addition to using the produced arrays with the Sprites classes, they can also be used (except sprite+mask) with the Arduboy2Base class <b>drawBitmap()</b> function. For this, the length and width bytes at the start of the array need to be commented out or deleted. To draw a given sprite or tile from an array containing more than one, the proper index into the array would have to be calculated (SpriteNumber * SpriteWidth * SpriteHeight / 8) as a pointer and passed as the bitmap parameter. Masking can be done by first drawing the mask using colour BLACK and then the sprite, at the same position, using colour WHITE (or reverse the two colours to draw the sprite inverted).
</p>
</div>

</div>

				<div style="position:relative">
					<div class="shape_18" style="left:24px;top:529px;width:702px;height:162px;z-index:18;position:absolute;">
						<div style="margin: 4.32px 2.16px 4.32px 2.16px; ">
							<p style="line-height:18px;text-align:center;margin-top:0px;margin-bottom:0px;" class="Style2">
								<br />
							</p>
							<p style="line-height:50.4px;text-align:center;margin-bottom:0px;margin-top:0px;" class="Style65">
								Drop your tile sheet here
							</p>
						</div>
					</div>
				</div>
				<div style="position:relative">
					<div class="shape_19" style="left:25px;top:734px;width:700px;height:160px;z-index:17;position:absolute;">
						<div style="margin: 4.32px 2.16px 4.32px 2.16px; " id='image-container'>

						</div>
					</div>
				</div>


			</div>

		</div>
		<a  class="Style2" href="LICENSE">Original Licence</a>
	</div>
</body>
</html>